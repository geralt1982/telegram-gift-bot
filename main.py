#!/usr/bin/env python3
import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

try:
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram import Update, Bot
    from telegram.error import TelegramError
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    sys.exit(1)

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

class SimpleGiftBot:
    def __init__(self):
        self.BOT_TOKEN = os.getenv("BOT_TOKEN", "")
        self.TARGET_USER_ID = int(os.getenv("TARGET_USER_ID", "0"))
        self.MONITOR_GROUP = os.getenv("MONITOR_GROUP", "gifts_detector")
        self.GIFT_TRIGGER_TEXT = os.getenv("GIFT_TRIGGER_TEXT", "üî• A new limited gift has appeared")
        self.SPAM_INTERVAL = float(os.getenv("SPAM_INTERVAL", "3.0"))
        self.SPAM_DURATION = int(os.getenv("SPAM_DURATION", "300"))
        self.SPAM_INTENSITY = int(os.getenv("SPAM_INTENSITY", "5"))
        
        if not self.BOT_TOKEN or not self.TARGET_USER_ID:
            logger.error("BOT_TOKEN –∏–ª–∏ TARGET_USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            sys.exit(1)
            
        self.application = None
        self.active_spam_tasks = {}
        self.messages_processed = 0
        self.gifts_detected = 0
        self.start_time = datetime.now()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        welcome_message = f"""
üéÅ Gift Detector Bot –∞–∫—Ç–∏–≤–µ–Ω!

–ú–æ–Ω–∏—Ç–æ—Ä—é –≥—Ä—É–ø–ø—É {self.MONITOR_GROUP} –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤.
–ö–æ–≥–¥–∞ –Ω–∞–π–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "{self.GIFT_TRIGGER_TEXT}", –Ω–∞—á–Ω—É —Å–ø–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /stop_spam - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ /help - –ü–æ–º–æ—â—å

–ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.TARGET_USER_ID}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–º–∞: {self.SPAM_INTERVAL}—Å
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.SPAM_DURATION}—Å
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.SPAM_INTENSITY} —Å–æ–æ–±—â–µ–Ω–∏–π

–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ
        """
        await update.message.reply_text(welcome_message)
        
    async def stop_spam_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        
        if user_id == self.TARGET_USER_ID:
            stopped_count = 0
            for task_user_id in list(self.active_spam_tasks.keys()):
                task = self.active_spam_tasks[task_user_id]
                task.cancel()
                del self.active_spam_tasks[task_user_id]
                stopped_count += 1
                
            if stopped_count > 0:
                await update.message.reply_text(f"‚úÖ –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
            else:
                await update.message.reply_text("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∞–º-—Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∞–º–∞.")
            
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        uptime = datetime.now() - self.start_time
        uptime_str = str(uptime).split('.')[0]
        active_spam_count = len(self.active_spam_tasks)
        
        status_message = f"""
üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_processed}
–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {self.gifts_detected}
–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∞–º-—Å–µ—Å—Å–∏–π: {active_spam_count}

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
‚Ä¢ –ì—Ä—É–ø–ø–∞: {self.MONITOR_GROUP}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.TARGET_USER_ID}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.SPAM_INTERVAL}—Å
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.SPAM_DURATION}—Å
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.SPAM_INTENSITY}

–°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if active_spam_count == 0 else 'üü° –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∞–º'}

–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
        """
        await update.message.reply_text(status_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        help_message = f"""
üÜò –ü–æ–º–æ—â—å –ø–æ Gift Detector Bot

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É {self.MONITOR_GROUP} –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ /stop_spam - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
2. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ "{self.GIFT_TRIGGER_TEXT}" –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å–ø–∞–º
3. –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {self.SPAM_INTERVAL}—Å
4. –°–ø–∞–º –¥–ª–∏—Ç—Å—è –¥–æ {self.SPAM_DURATION}—Å –∏–ª–∏ –¥–æ –∫–æ–º–∞–Ω–¥—ã /stop_spam
5. –ö–∞–∂–¥–∞—è –≤–æ–ª–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {self.SPAM_INTENSITY} —Å–æ–æ–±—â–µ–Ω–∏–π

–£–¥–∞—á–Ω–æ–π –æ—Ö–æ—Ç—ã –∑–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏! üéÅ
        """
        await update.message.reply_text(help_message)
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        try:
            message = update.message
            if not message or not message.text:
                return
                
            self.messages_processed += 1
            
            chat = message.chat
            if not chat:
                return
                
            is_target_group = (
                chat.username == self.MONITOR_GROUP or
                chat.title == self.MONITOR_GROUP or
                str(chat.id) == self.MONITOR_GROUP
            )
            
            if not is_target_group:
                return
                
            if message.text.startswith(self.GIFT_TRIGGER_TEXT):
                self.gifts_detected += 1
                logger.info(f"üéÅ –ü–û–î–ê–†–û–ö –ù–ê–ô–î–ï–ù! –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:100]}...")
                await self.start_spam_notifications(context.bot, message.text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    async def start_spam_notifications(self, bot: Bot, original_message: str) -> None:
        try:
            if self.TARGET_USER_ID in self.active_spam_tasks:
                self.active_spam_tasks[self.TARGET_USER_ID].cancel()
                
            task = asyncio.create_task(self.spam_worker(bot, original_message))
            self.active_spam_tasks[self.TARGET_USER_ID] = task
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ø–∞–º–∞: {e}")
            
    async def spam_worker(self, bot: Bot, original_message: str) -> None:
        try:
            start_time = datetime.now()
            end_time = start_time + timedelta(seconds=self.SPAM_DURATION)
            
            alert_message = f"""
üö® –ü–û–î–ê–†–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù! –ü–†–û–°–´–ü–ê–ô–°–Ø! üö®

üéÅ –í –≥—Ä—É–ø–ø–µ gifts_detector –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫!

–°–æ–æ–±—â–µ–Ω–∏–µ:
{original_message}

–í—Ä–µ–º—è: {start_time.strftime('%H:%M:%S')}

–ò—Å–ø–æ–ª—å–∑—É–π /stop_spam —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
            """
            
            await bot.send_message(
                chat_id=self.TARGET_USER_ID,
                text=alert_message
            )
            
            message_count = 0
            spam_messages = [
                "üö® –ü–†–û–°–´–ü–ê–ô–°–Ø! –ü–æ–¥–∞—Ä–æ–∫ #{} –æ–±–Ω–∞—Ä—É–∂–µ–Ω!",
                "‚è∞ –ù–ï –ü–†–û–ü–£–°–¢–ò! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{}",
                "üéÅ –ü–û–î–ê–†–û–ö –î–û–°–¢–£–ü–ï–ù! –°–æ–æ–±—â–µ–Ω–∏–µ #{}",
                "üî• –°–†–û–ß–ù–û: –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ #{}",
                "‚ö° –ü–†–û–°–ù–ò–°–¨! –ü–æ–¥–∞—Ä–æ–∫ #{} –Ω–∞–π–¥–µ–Ω!",
                "üöÄ –ë–´–°–¢–†–ï–ï! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{}",
                "üí• –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–¥–∞—Ä–æ–∫ #{} –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω!",
                "üéØ –ü–†–û–°–ù–ò–°–¨! –í–∞–∂–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ #{}"
            ]
            
            while datetime.now() < end_time:
                try:
                    for i in range(self.SPAM_INTENSITY):
                        message_count += 1
                        message_text = spam_messages[message_count % len(spam_messages)].format(message_count)
                        
                        await bot.send_message(
                            chat_id=self.TARGET_USER_ID,
                            text=message_text
                        )
                        
                        await asyncio.sleep(0.5)
                        
                    await asyncio.sleep(self.SPAM_INTERVAL)
                    
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞–º–∞: {e}")
                    await asyncio.sleep(2)
                    
                except asyncio.CancelledError:
                    logger.info("–°–ø–∞–º-–∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    break
                    
            if self.TARGET_USER_ID in self.active_spam_tasks:
                final_message = f"""
‚úÖ –°–ø–∞–º-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞

–°–≤–æ–¥–∫–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.SPAM_DURATION} —Å–µ–∫—É–Ω–¥
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}

–ù–∞–¥–µ—é—Å—å, —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π /stop_spam –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥—É—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
                """
                
                await bot.send_message(
                    chat_id=self.TARGET_USER_ID,
                    text=final_message
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ø–∞–º-–≤–æ—Ä–∫–µ—Ä–µ: {e}")
            
        finally:
            if self.TARGET_USER_ID in self.active_spam_tasks:
                del self.active_spam_tasks[self.TARGET_USER_ID]
                
    async def run(self):
        try:
            self.application = Application.builder().token(self.BOT_TOKEN).build()
            
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("stop_spam", self.stop_spam_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            self.application.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self.handle_message
            ))
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Gift Detector Bot...")
            await self.application.run_polling(
                poll_interval=1.0,
                timeout=20,
                read_timeout=20,
                write_timeout=20,
                connect_timeout=20
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

async def main():
    bot = SimpleGiftBot()
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
