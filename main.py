#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Gift Detector Bot –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, Any

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

class SimpleGiftBot:
    def __init__(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
        self.bot_token = os.getenv('BOT_TOKEN')
        self.target_user_id = int(os.getenv('TARGET_USER_ID', '0'))
        
        if not self.bot_token or not self.target_user_id:
            raise ValueError("BOT_TOKEN –∏ TARGET_USER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–º–∞
        self.spam_interval = float(os.getenv('SPAM_INTERVAL', '3.0'))
        self.spam_duration = int(os.getenv('SPAM_DURATION', '300'))
        self.spam_intensity = int(os.getenv('SPAM_INTENSITY', '5'))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.spam_active = False
        self.spam_task = None
        self.application = None
        
        logger.info(f"Bot initialized for user {self.target_user_id}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "üéÅ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å —è —Å–ª–µ–∂—É –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏ –±—É–¥—É –±—É–¥–∏—Ç—å –≤–∞—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/stop_spam - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/help - –ü–æ–º–æ—â—å"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    async def stop_spam_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /stop_spam"""
        if self.spam_active and self.spam_task:
            self.spam_active = False
            self.spam_task.cancel()
            self.spam_task = None
            await update.message.reply_text("‚úÖ –°–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            logger.info("–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –°–ø–∞–º —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        status = "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω" if not self.spam_active else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"–°–ø–∞–º: {status}\n"
            f"–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.target_user_id}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.spam_interval}—Å\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.spam_duration}—Å\n"
            f"–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.spam_intensity} —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        await update.message.reply_text(
            "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
            "üîç –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:\n"
            "- 'üî• A new limited gift has appeared'\n"
            "- '–ø–æ–¥–∞—Ä–æ–∫'\n"
            "- 'gift'\n\n"
            "üì± –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/stop_spam - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "‚öôÔ∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not update.message or not update.message.text:
            return
            
        message_text = update.message.text.lower()
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
        gift_triggers = [
            "üî• a new limited gift has appeared",
            "–ø–æ–¥–∞—Ä–æ–∫",
            "gift",
            "üéÅ"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        for trigger in gift_triggers:
            if trigger in message_text:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫! –¢—Ä–∏–≥–≥–µ—Ä: '{trigger}' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message_text[:100]}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if not self.spam_active:
                    await self.start_spam_notifications(context.bot, update.message.text)
                break

    async def start_spam_notifications(self, bot: Bot, original_message: str) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–ø–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.spam_active:
            return
            
        self.spam_active = True
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–∞—Ä–∫–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–ø–∞–º–∞
        self.spam_task = asyncio.create_task(
            self.spam_worker(bot, original_message)
        )

    async def spam_worker(self, bot: Bot, original_message: str) -> None:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∞–º–∞"""
        start_time = datetime.now()
        messages_sent = 0
        
        try:
            while self.spam_active:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
                elapsed = (datetime.now() - start_time).total_seconds()
                if elapsed >= self.spam_duration:
                    logger.info(f"–°–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ({self.spam_duration}—Å)")
                    break
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                for i in range(self.spam_intensity):
                    if not self.spam_active:
                        break
                        
                    try:
                        message = (
                            f"üö® –ü–û–î–ê–†–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù! üö®\n\n"
                            f"‚è∞ {datetime.now().strftime('%H:%M:%S')}\n\n"
                            f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{original_message[:200]}...\n\n"
                            f"üî• –ë–´–°–¢–†–ï–ï! –ù–ï –ü–†–û–°–ü–ò –ü–û–î–ê–†–û–ö!\n\n"
                            f"üìä –°–æ–æ–±—â–µ–Ω–∏–µ #{messages_sent + 1}"
                        )
                        
                        await bot.send_message(
                            chat_id=self.target_user_id,
                            text=message
                        )
                        messages_sent += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–∞–∫–µ—Ç–µ
                        await asyncio.sleep(0.5)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                await asyncio.sleep(self.spam_interval)
                
        except asyncio.CancelledError:
            logger.info("–ó–∞–¥–∞—á–∞ —Å–ø–∞–º–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ spam_worker: {e}")
        finally:
            self.spam_active = False
            self.spam_task = None
            logger.info(f"–°–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_sent}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.bot_token).build()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("stop_spam", self.stop_spam_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.application.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self.handle_message
            ))
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.application.run_polling(
                poll_interval=1.0,
                timeout=20,
                read_timeout=20,
                write_timeout=20,
                connect_timeout=20
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleGiftBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
